public class CatalogPrototypeModel {

	Closure currentImpl = null;
	
	/** dynamically generated by interface meta data - using default implementation info */
	public CatalogPrototypeModel() {
		currentImpl = { paramMap -> implement__column(paramMap); }
	}

	/** dynamically generated by interface meta data - using the list of implmentations */
	void setCurrentImpl(index) {
		if (index == 0) {
			currentImpl = { paramMap -> implement__column(paramMap); }
		} else if (index == 1) {
			currentImpl = { paramMap -> implement__corn(paramMap); }
		}
	}

	/** statically presents in all catalog models */
	public void execute(HashMap paramMap) {
		currentImpl.call(paramMap);
	}

	public String[] getImplementationNames() {
		return [ "column", "corn" ];
	}
	
	public void implement__column(Map paramMap) {
		/** dynamically generated using the meta info of 'interface mapper': if parameter name is 'area', script variable name is '_ITFMAP__area'. if there are many 'area's, scripting variable name will be ${ITFMAP}.area__1, ${ITFMAP}.area__2 */
		def _ITFMAP__area = paramMap.get("_ITFMAP__area");
		def _ITFMAP__height = paramMap.get("_ITFMAP__height");
		def _ITFMAP__volume = paramMap.get("_ITFMAP__volume");
		
		_ITFMAP__volume << _ITFMAP__area * _ITFMAP__height;
	}
	
	/** dynamically generated */
	public void implement__corn(Map paramMap) {
		def _ITFMAP__area = paramMap.get("_ITFMAP__area");
		def _ITFMAP__height = paramMap.get("_ITFMAP__height");
		def _ITFMAP__volume = paramMap.get("_ITFMAP__volume");
		
		_ITFMAP__volume << (_ITFMAP__area * _ITFMAP__height).divide(new Double("3"));
	}
}

def model = new CatalogPrototypeModel();
def paramMap = new HashMap();
paramMap.put("_ITFMAP__area", A);
paramMap.put("_ITFMAP__height", H);
paramMap.put("_ITFMAP__volume", V);

//println IMPL_SWITCH;
//println IMPL_SWITCH.getData();
//println IMPL_SWITCH.getData().getLastSelection();

def switchValue = IMPL_SWITCH.getData().getElementValue(IMPL_SWITCH.getData().getLastSelection());
model.setCurrentImpl(switchValue);
println "executing model with switch index at " + switchValue;
model.execute(paramMap);