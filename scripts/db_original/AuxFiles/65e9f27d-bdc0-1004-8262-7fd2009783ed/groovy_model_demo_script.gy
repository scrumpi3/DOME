public class _CatalogModel__DemoModel {

	Closure currentImpl = null;
	
	/** dynamically generated by interface meta data - using default implementation info */
	public _CatalogModel__DemoModel() {
		currentImpl = { paramMap -> implement__column(paramMap); }
	}

	/** dynamically generated by interface meta data - using the list of implmentations */
	void setCurrentImpl(index) {
		if (index == 0) {
			currentImpl = { paramMap -> implement__column(paramMap); }
		} else if (index == 1) {
			currentImpl = { paramMap -> implement__corn(paramMap); }
		}
	}

	/** statically presents in all catalog models */
	public void execute(HashMap paramMap) {
		println "are you reaching here"
		currentImpl.call(paramMap);
	}

	public String[] getImplementationNames() {
		return [ "column", "corn" ];
	}
	
	public void implement__column(Map paramMap) {
		/** dynamically generated using the meta info of 'interface mapper': if parameter name is 'area', script variable name is '_ITFMAP__area'. if there are many 'area's, scripting variable name will be ${ITFMAP}.area__1, ${ITFMAP}.area__2 */
		def _ITFMAP__area = paramMap.get("_ITFMAP__area");
		def _ITFMAP__height = paramMap.get("_ITFMAP__height");
		def _ITFMAP__volume = paramMap.get("_ITFMAP__volume");
		
		_ITFMAP__volume << _ITFMAP__area * _ITFMAP__height;
	}
	
	/** dynamically generated */
	public void implement__corn(Map paramMap) {
		def _ITFMAP__area = paramMap.get("_ITFMAP__area");
		def _ITFMAP__height = paramMap.get("_ITFMAP__height");
		def _ITFMAP__volume = paramMap.get("_ITFMAP__volume");
		
		//_ITFMAP__volume << ((_ITFMAP__area * _ITFMAP__height).divide(new Double(3)));
		_ITFMAP__volume << (_ITFMAP__area * _ITFMAP__height).divide(new Double("3"));
		// _ITFMAP__volume << ((_ITFMAP__area * _ITFMAP__height) / new Double("3"));
		//_ITFMAP__volume << _ITFMAP__area * _ITFMAP__height;
	}
}

volume << area * height;

println height
println area
println volume

import mit.cadlab.dome3.api.*;

/* open a connection and log in to DOME server */
def conn = new DomeConnection("tutorialUser", "123", "localhost:8080");

/* browse folders, models and Interfaces */
def publicFolder = conn.getPublicFolder();
def tutorialExampleFolder = publicFolder.getFolder("Tutorial examples");
def polymerCuringModel = tutorialExampleFolder.getModelByName("Polymer curing model");
def polymerCuringInterface = polymerCuringModel.getInterfaceByName("polymer curing interface");

/* [optional part start] how to browse folders other than server folders. note that ROOT don't have user's public/private folder, so it should print null. */
System.out.println("My Public Folder= " + conn.getMyPublicFolder());
System.out.println("My Public Folder= " + conn.getMyPrivateFolder());

def userNames = conn.getUserNames();
System.out.println("User Names= " + Arrays.asList(userNames));
def i = 0;
while (i < userNames.length) { 
    System.out.println("User Public Folder= " + conn.getUserPublicFolder(userNames [i]));
    System.out.println("User Public Folder= " + conn.getUserPrivateFolder(userNames [i]));
    i++;
}

def groupNames = conn.getGroupNames();
System.out.println("Group Names= " + Arrays.asList(groupNames));
while (i < userNames.length) { 
    System.out.println("Group Public Folder= " + conn.getGroupPublicFolder(groupNames [i]));
    System.out.println("Group Private Folder= " + conn.getGroupPrivateFolder(groupNames [i]));
    i++;
}

System.out.println("Server Public Folder= " + conn.getServerPublicFolder()); // the same as getPublicFolder()
System.out.println("Server Private Folder= " + conn.getServerPrivateFolder()); // the same as getPrivateFolder()
/* [optional part end]*/

/* instantiate Runtime Interface and retrieve the list of parameters */
def runtimeInterface = polymerCuringInterface.createRuntimeInterface();
List paramList = runtimeInterface.getParameters();
System.out.println("[PARAM LIST] " + paramList);

/* changes the values of parameters */
def nominalParam = runtimeInterface.getParameterByName("nominalModulus");
//nominalParam.setRealValue(400000.0);
nominalParam.setRealValue(height.getData().getValue());


/* submit changes and handle execution time limit exception */
try {
    runtimeInterface.submit();
} catch (ExecutionTimeLimitException e) {
    System.out.println("Execution time expired.");
}

/* retrieve the results */
def actualParam = runtimeInterface.getParameterByName("actualModulus");
System.out.println("[RESULT VALUE] actual modulus = " + actualParam.getRealValue());

/* log out and close connection */
conn.close();

//def paramMap = new HashMap();
//paramMap.put("_ITFMAP__area", area);
//paramMap.put("_ITFMAP__height", height);
//paramMap.put("_ITFMAP__volume", volume);
//implement__column(paramMap);

