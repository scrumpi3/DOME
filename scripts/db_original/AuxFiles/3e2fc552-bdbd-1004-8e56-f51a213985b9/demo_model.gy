public class CatalogReal {
	double data;
	int unitScale;
	int id;
	
	public CatalogReal(data, unitScale) {
		this.data = data;
		this.unitScale = unitScale;
	}
	
	public void setId(int id) {
		this.id = id;
	}
		
	public void set(input) {
		println "you called me";
		println input;
	}
	
	public double getData() {
		return data;
	}
	
	public int getScale() {
		return unitScale;
	}
	
	public double getScaledData() {
		return data * unitScale;
	}
	
	public CatalogReal plus(CatalogReal input) {
		return new CatalogReal((getScaledData() + input.getScaledData()) / getScale(), getScale());
	}
	
	public CatalogReal multiply(CatalogReal input) {
		return new CatalogReal((getScaledData() * input.getScaledData()) / getScale(), getScale());
	}
	
	public CatalogReal divide(CatalogReal input) {
		return new CatalogReal((getScaledData() / input.getScaledData()) / getScale(), getScale());
	}
		
	public CatalogReal leftShift(CatalogReal input) {
		this.data = input.getData();
		this.unitScale = input.getScale();
		return this;
	}
	
	public String toString() {
		return "id = " + id + ", data = " + data + ", scale = " + unitScale;
	}
}
	

public class _CatalogModel__DemoModel {

	Closure currentImpl = null;
	
	/** dynamically generated by interface meta data - using default implementation info */
	public _CatalogModel__DemoModel() {
		currentImpl = { paramMap -> implement__column(paramMap); }
	}

	/** dynamically generated by interface meta data - using the list of implmentations */
	void setCurrentImpl(index) {
		if (index == 0) {
			currentImpl = { paramMap -> implement__column(paramMap); }
		} else if (index == 1) {
			currentImpl = { paramMap -> implement__corn(paramMap); }
		}
	}

	/** statically presents in all catalog models */
	public void execute(HashMap paramMap) {
		println "are you reaching here"
		currentImpl.call(paramMap);
	}

	public String[] getImplementationNames() {
		return [ "column", "corn" ];
	}
	
	public void implement__column(Map paramMap) {
		/** dynamically generated using the meta info of 'interface mapper': if parameter name is 'area', script variable name is '_ITFMAP__area'. if there are many 'area's, scripting variable name will be ${ITFMAP}.area__1, ${ITFMAP}.area__2 */
		def _ITFMAP__area = paramMap.get("_ITFMAP__area");
		def _ITFMAP__height = paramMap.get("_ITFMAP__height");
		def _ITFMAP__volume = paramMap.get("_ITFMAP__volume");
		
		_ITFMAP__volume << _ITFMAP__area * _ITFMAP__height;
	}
	
	/** dynamically generated */
	public void implement__corn(Map paramMap) {
		def _ITFMAP__area = paramMap.get("_ITFMAP__area");
		def _ITFMAP__height = paramMap.get("_ITFMAP__height");
		def _ITFMAP__volume = paramMap.get("_ITFMAP__volume");
		
		//_ITFMAP__volume << ((_ITFMAP__area * _ITFMAP__height).divide(new Double(3)));
		//_ITFMAP__volume << (_ITFMAP__area * _ITFMAP__height).divide(new Double("3"));
		_ITFMAP__volume << _ITFMAP__area * _ITFMAP__height ** 3;
		//_ITFMAP__volume << _ITFMAP__area * _ITFMAP__height;
	}
}

// below code is performed in the CatalogPlugin class before it executes this script file.
// def paramMap = new HashMap();
// paramMap.put("_ITFMAP__area", new Double("3"));
// paramMap.put("_ITFMAP__height", new Double("5"));
// paramMap.put("_ITFMAP__volume", new Double("10"));
 
// def a = new CatalogReal(9, 100);
// a.id = 10;
// def b = new CatalogReal(50, 10);
// b.id = 20;
// def c = new CatalogReal(3, 10);
// c.id = 30;
// 
// c << a + b
//println a
//println b
//println c
//
//def e = a.divide(new CatalogReal(3, 10));
//println e

// verbose initial param map
println paramMap;
def catModel = new _CatalogModel__DemoModel();
catModel.setCurrentImpl(1);
catModel.execute(paramMap);
// verbose updated param map
println paramMap;

// after executing this script CatalogPlugin class looks for an object binded to 'output' to retrieve the execution result