package hybridsystemgui;

import mit.cadlab.dome3.gui.guiutils.customGui.CustomGui;
import mit.cadlab.dome3.objectmodel.modelinterface.ModelInterfaceBase;
import mit.cadlab.dome3.swing.Templates;

import javax.swing.*;
import java.awt.*;

public class ObjectiveOutputCard extends JPanel
{
	public static final GridBagConstraints gbc = null;

    private final String designTitle = "Design objectives";
    private final String energyTitle = "Energy aspects";
    private final String co2Title = "CO2 emissions";

    private JTextField electCost;
    private JTextField capCost;
    private JTextField lccCost;
    private JTextField netCO2;
    private JTextField prodEff;

    private JTextField pvProdEff;
    private JTextField pvEPB;
    private JTextField pvInputEnergy;
    private JTextField pvInstCount;
    private JTextField dieselProdEff;
    private JTextField dieselEPB;
    private JTextField dieselInputEnergy;
    private JTextField dieselInstCount;

    private JTextField pvMfc;
    private JTextField dieselMfc;
    private JTextField battMfc;
    private JTextField optCO2;

	public ObjectiveOutputCard()
	{
        JComponent[] comps = {makeDesignPanel(),  makeEnergyPanel(), makeCO2Panel()};
        // gridx, gridy, gridwidth, gridheight, weightx, weighty, anchor, fill, insets(t,l,b,r), ipadx, ipady
        GridBagConstraints[] gbcs = {
            new GridBagConstraints(0, 0, 1, 1, 1.0, 0.0, gbc.CENTER, gbc.HORIZONTAL, new Insets(0, 0, 5, 0), 0, 0),
            new GridBagConstraints(0, 1, 1, 1, 1.0, 0.0, gbc.CENTER, gbc.HORIZONTAL, new Insets(0, 0, 5, 0), 0, 0),
            new GridBagConstraints(0, 2, 1, 1, 1.0, 1.0, gbc.NORTH, gbc.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0),
        };

        Templates.layoutGridBag(this, comps, gbcs);
	}

    private JPanel makeDesignPanel() {
        JPanel bigP = new JPanel();

        JTextArea moduleSpecText = Templates.makeDTextArea("These values are critical objectives of the hybrid system, " +
                "and should be optimized.");

        moduleSpecText.setOpaque(false);
        JPanel p = new JPanel();

        JLabel electCostLabel = Templates.makeLabel("Electricity cost ($/ kWh): ");
        electCostLabel.setToolTipText("Cost of electricity generated by the hybrid system");
        electCost = Templates.makeTextField("");

        JLabel capCostLabel = Templates.makeLabel("Capital cost ($): ");
        capCostLabel.setToolTipText("Total capital cost, including installation, of the hybrid system");
        capCost = Templates.makeTextField("");

        JLabel lccCostLabel = Templates.makeLabel("Life-cycle cost ($): ");
        lccCostLabel.setToolTipText("Total cost of the hybrid system over its entire life-cycle");
        lccCost = Templates.makeTextField("");

        JLabel netCO2Label = Templates.makeLabel("Life-cycle CO2 emission (t): ");
        netCO2Label.setToolTipText("Total CO2 emission of the hybrid system over its entire life-cycle");
        netCO2 = Templates.makeTextField("");

        JLabel prodEffLabel = Templates.makeLabel("Net production efficiency (%): ");
        prodEffLabel.setToolTipText("Electricity production efficiency of the hybrid system.");
        prodEff = Templates.makeTextField("");

        JComponent[] comps = {electCostLabel, electCost,
                              capCostLabel, capCost,
                              netCO2Label, netCO2,
                              lccCostLabel, lccCost,
                              prodEffLabel, prodEff,
        };
        // gridx, gridy, gridwidth, gridheight, weightx, weighty, anchor, fill, insets(t,l,b,r), ipadx, ipady
        GridBagConstraints[] gbcs = {

            new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0, gbc.WEST, gbc.NONE, new Insets(10, 5, 0, 0), 0, 0),
            new GridBagConstraints(1, 1, 1, 1, 1.0, 0.0, gbc.CENTER, gbc.HORIZONTAL, new Insets(10, 5, 0, 10), 0, 0),
            new GridBagConstraints(2, 1, 1, 1, 0.0, 0.0, gbc.WEST, gbc.NONE, new Insets(10, 5, 0, 0), 0, 0),
            new GridBagConstraints(3, 1, 1, 1, 1.0, 0.0, gbc.CENTER, gbc.HORIZONTAL, new Insets(10, 5, 0, 5), 0, 0),

            new GridBagConstraints(0, 2, 1, 1, 0.0, 0.0, gbc.WEST, gbc.NONE, new Insets(5, 5, 0, 0), 0, 0),
            new GridBagConstraints(1, 2, 1, 1, 1.0, 0.0, gbc.CENTER, gbc.HORIZONTAL, new Insets(5, 5, 0, 10), 0, 0),
            new GridBagConstraints(2, 2, 1, 1, 0.0, 0.0, gbc.WEST, gbc.NONE, new Insets(5, 5, 0, 0), 0, 0),
            new GridBagConstraints(3, 2, 1, 1, 1.0, 0.0, gbc.CENTER, gbc.HORIZONTAL, new Insets(5, 5, 0, 5), 0, 0),

            new GridBagConstraints(0, 3, 1, 1, 0.0, 0.0, gbc.WEST, gbc.NONE, new Insets(5, 5, 5, 0), 0, 0),
            new GridBagConstraints(1, 3, 1, 1, 1.0, 0.0, gbc.CENTER, gbc.HORIZONTAL, new Insets(5, 5, 5, 10), 0, 0),
        };

        Templates.layoutGridBag(p, comps, gbcs);
        bigP.setBorder(BorderFactory.createTitledBorder(null, designTitle));

        JComponent[] bigComps = {moduleSpecText, p};

        // gridx, gridy, gridwidth, gridheight, weightx, weighty, anchor, fill, insets(t,l,b,r), ipadx, ipady
        GridBagConstraints[] bigGbcs = {
            new GridBagConstraints(0, 0, 1, 1, 1.0, 0.0, gbc.WEST, gbc.HORIZONTAL, new Insets(0, 5, 0, 5), 0, 0),
            new GridBagConstraints(0, 1, 1, 1, 1.0, 0.0, gbc.WEST, gbc.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0),
        };
        Templates.layoutGridBag(bigP, bigComps, bigGbcs);
        return bigP;
    }

    private JPanel makeEnergyPanel() {
        JPanel p = new JPanel();

        JLabel pvLabel = Templates.makeLabel("       PV array       ", Templates.FONT11B);
        JLabel dieselLabel = Templates.makeLabel("Diesel generator", Templates.FONT11B);

        JLabel pvProdEffLabel = Templates.makeLabel("Production efficiency (%): ");
        pvProdEffLabel.setToolTipText("Energy production efficiency of the PV array or diesel generator");
        pvProdEff = Templates.makeTextField("");
        dieselProdEff = Templates.makeTextField("");

        JLabel pvEPBLabel = Templates.makeLabel("Energy payback time (y): ");
        pvEPBLabel.setToolTipText("Time required to recover total energy invested in the PV array or diesel generator");
        pvEPB = Templates.makeTextField("");
        dieselEPB = Templates.makeTextField("");

        JLabel pvInputEnergyLabel = Templates.makeLabel("Total input energy (kWh): ");
        pvInputEnergyLabel.setToolTipText("Total energy input to PV array or diesel generator throughout energy analysis. " +
                "This is a combined result of total energy invested in material production, manufacturing, installation," +
                " operation and management, distribution, and end-of-life management");
        pvInputEnergy = Templates.makeTextField("");
        dieselInputEnergy = Templates.makeTextField("");

        JLabel pvInstCountLabel = Templates.makeLabel("Installation count: ");
        pvInstCountLabel.setToolTipText("Number of times that the PV array and diesel generator has to be installed ");
        pvInstCount = Templates.makeTextField("");
        dieselInstCount = Templates.makeTextField("");

        JComponent[] comps = {pvLabel, dieselLabel,
                              pvInstCountLabel, pvInstCount, dieselInstCount,
                              pvEPBLabel, pvEPB, dieselEPB,
                              pvInputEnergyLabel, pvInputEnergy, dieselInputEnergy,
                              pvProdEffLabel, pvProdEff, dieselProdEff,
    };
        // gridx, gridy, gridwidth, gridheight, weightx, weighty, anchor, fill, insets(t,l,b,r), ipadx, ipady
        GridBagConstraints[] gbcs = {
            new GridBagConstraints(1, 0, 1, 1, 0.0, 0.0, gbc.CENTER, gbc.NONE, new Insets(-5, 5, 0, 0), 0, 0),
            new GridBagConstraints(2, 0, 1, 1, 0.0, 0.0, gbc.CENTER, gbc.NONE, new Insets(-5, 5, 0, 5), 0, 0),

            new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0, gbc.WEST, gbc.NONE, new Insets(5, 5, 0, 0), 0, 0),
            new GridBagConstraints(1, 1, 1, 1, 1.0, 0.0, gbc.CENTER, gbc.HORIZONTAL, new Insets(5, 5, 0, 0), 0, 0),
            new GridBagConstraints(2, 1, 1, 1, 1.0, 0.0, gbc.CENTER, gbc.HORIZONTAL, new Insets(5, 5, 0, 5), 0, 0),

            new GridBagConstraints(0, 2, 1, 1, 0.0, 0.0, gbc.WEST, gbc.NONE, new Insets(5, 5, 0, 0), 0, 0),
            new GridBagConstraints(1, 2, 1, 1, 1.0, 0.0, gbc.CENTER, gbc.HORIZONTAL, new Insets(5, 5, 0, 0), 0, 0),
            new GridBagConstraints(2, 2, 1, 1, 1.0, 0.0, gbc.CENTER, gbc.HORIZONTAL, new Insets(5, 5, 0, 5), 0, 0),

            new GridBagConstraints(0, 3, 1, 1, 0.0, 0.0, gbc.WEST, gbc.NONE, new Insets(5, 5, 0, 0), 0, 0),
            new GridBagConstraints(1, 3, 1, 1, 1.0, 0.0, gbc.CENTER, gbc.HORIZONTAL, new Insets(5, 5, 0, 0), 0, 0),
            new GridBagConstraints(2, 3, 1, 1, 1.0, 0.0, gbc.CENTER, gbc.HORIZONTAL, new Insets(5, 5, 0, 5), 0, 0),

            new GridBagConstraints(0, 4, 1, 1, 0.0, 0.0, gbc.WEST, gbc.NONE, new Insets(5, 5, 5, 0), 0, 0),
            new GridBagConstraints(1, 4, 1, 1, 1.0, 0.0, gbc.CENTER, gbc.HORIZONTAL, new Insets(5, 5, 0, 0), 0, 0),
            new GridBagConstraints(2, 4, 1, 1, 1.0, 0.0, gbc.CENTER, gbc.HORIZONTAL, new Insets(5, 5, 5, 5), 0, 0),
        };

        Templates.layoutGridBag(p, comps, gbcs);
        p.setBorder(BorderFactory.createTitledBorder(null, energyTitle));

        return p;
    }

    private JPanel makeCO2Panel() {
        JPanel p = new JPanel();

        JLabel pvMfcLabel = Templates.makeLabel("PV mfg. (t): ");
        pvMfcLabel.setToolTipText("CO2 emission from PV manufacturing");
        pvMfc = Templates.makeTextField("");

        JLabel dieselMfcLabel = Templates.makeLabel("Diesel generator mfg. (t): ");
        dieselMfcLabel.setToolTipText("CO2 emission from diesel generator manufacturing");
        dieselMfc = Templates.makeTextField("");

        JLabel battMfcLabel = Templates.makeLabel("Battery mfg. (t): ");
        battMfcLabel.setToolTipText("CO2 emission from battery manufacturing");
        battMfc = Templates.makeTextField("");

        JLabel optCO2Label = Templates.makeLabel("Operation (t): ");
        optCO2Label.setToolTipText("CO2 emission during operation of the hybrid system");
        optCO2 = Templates.makeTextField("");

        JComponent[] comps = {pvMfcLabel, pvMfc,
                              optCO2Label, optCO2,
                              battMfcLabel, battMfc,
                              dieselMfcLabel, dieselMfc,
        };
        // gridx, gridy, gridwidth, gridheight, weightx, weighty, anchor, fill, insets(t,l,b,r), ipadx, ipady
        GridBagConstraints[] gbcs = {
            new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0, gbc.WEST, gbc.NONE, new Insets(0, 5, 0, 0), 0, 0),
            new GridBagConstraints(1, 0, 1, 1, 1.0, 0.0, gbc.CENTER, gbc.HORIZONTAL, new Insets(0, 5, 0, 10), 0, 0),
            new GridBagConstraints(2, 0, 1, 1, 0.0, 0.0, gbc.WEST, gbc.NONE, new Insets(0, 5, 0, 0), 0, 0),
            new GridBagConstraints(3, 0, 1, 1, 1.0, 0.0, gbc.CENTER, gbc.HORIZONTAL, new Insets(0, 5, 0, 5), 0, 0),

            new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0, gbc.WEST, gbc.NONE, new Insets(5, 5, 5, 0), 0, 0),
            new GridBagConstraints(1, 1, 1, 1, 1.0, 0.0, gbc.CENTER, gbc.HORIZONTAL, new Insets(5, 5, 5, 10), 0, 0),
            new GridBagConstraints(2, 1, 1, 1, 0.0, 0.0, gbc.WEST, gbc.NONE, new Insets(5, 5, 5, 0), 0, 0),
            new GridBagConstraints(3, 1, 1, 1, 1.0, 0.0, gbc.CENTER, gbc.HORIZONTAL, new Insets(5, 5, 5, 5), 0, 0),
        };

        Templates.layoutGridBag(p, comps, gbcs);
        p.setBorder(BorderFactory.createTitledBorder(null, co2Title));

        return p;
    }

    public void setInterface(ModelInterfaceBase iface) {
        CustomGui.connectStringOrNumberTextField(iface, "net electricity cost", electCost);
        CustomGui.connectStringOrNumberTextField(iface, "net capital cost", capCost);
        CustomGui.connectStringOrNumberTextField(iface, "net life-cycle cost", lccCost);
        CustomGui.connectStringOrNumberTextField(iface, "total CO2 emission", netCO2);
        CustomGui.connectStringOrNumberTextField(iface, "net electricity production efficiency", prodEff);

        CustomGui.connectStringOrNumberTextField(iface, "PV electricity production efficiency", pvProdEff);
        CustomGui.connectStringOrNumberTextField(iface, "PV energy payback time", pvEPB);
        CustomGui.connectStringOrNumberTextField(iface, "PV total input energy", pvInputEnergy);
        CustomGui.connectStringOrNumberTextField(iface, "PV module installation count", pvInstCount);
        CustomGui.connectStringOrNumberTextField(iface, "diesel electricity production efficiency", dieselProdEff);
        CustomGui.connectStringOrNumberTextField(iface, "diesel energy payback time", dieselEPB);
        CustomGui.connectStringOrNumberTextField(iface, "diesel total input energy", dieselInputEnergy);
        CustomGui.connectStringOrNumberTextField(iface, "diesel installation count", dieselInstCount);

        CustomGui.connectStringOrNumberTextField(iface, "battery manufacturing CO2 emission", battMfc);
        CustomGui.connectStringOrNumberTextField(iface, "PV manufacturing CO2 emission", pvMfc);
        CustomGui.connectStringOrNumberTextField(iface, "diesel generator manufacturing CO2 emission", dieselMfc);
        CustomGui.connectStringOrNumberTextField(iface, "operation CO2 emission", optCO2);
    }

	public static void main(String[] args)
	{
		JFrame f = new JFrame("Config card");
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		f.getContentPane().add(new ObjectiveOutputCard());
        f.pack();
		f.show();
	}
}
