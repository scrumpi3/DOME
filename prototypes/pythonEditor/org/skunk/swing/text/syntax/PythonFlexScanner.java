/* The following code was generated by JFlex 1.3 on 4/12/01 12:47 PM */

/*
 *  Copyright (c) 2001, Jacob Smullyan.
 *
 *  This is part of SkunkDAV, a WebDAV client.  See http://skunkdav.sourceforge.net/ 
 *  for the latest version.
 * 
 *  SkunkDAV is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License as published
 *  by the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 * 
 *  SkunkDAV is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with SkunkDAV; see the file COPYING.  If not, write to the Free
 *  Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 *  02111-1307, USA.
*/


package org.skunk.swing.text.syntax;

//for main method
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3
 * on 4/12/01 12:47 PM from the specification file
 * <tt>file:/home/smulloni/workdir/skunkdav/org/skunk/swing/text/syntax/python.flex</tt>
 */
public class PythonFlexScanner extends FlexScanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int COMMENT_STATE = 3;
  final public static int YYINITIAL = 0;
  final public static int MULTI_LINE_STRING_STATE = 2;
  final public static int STRING_STATE = 1;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\0\1\2\1\0\1\0\1\1\22\0\1\0\1\56\1\61"+
    "\1\62\1\0\1\55\1\55\1\60\1\51\1\51\1\55\1\21\1\51"+
    "\1\21\1\17\1\55\1\6\1\15\2\14\4\14\2\7\1\4\1\0"+
    "\1\54\1\52\1\53\2\0\4\12\1\20\1\12\3\3\1\16\1\3"+
    "\1\10\1\3\1\50\3\3\1\57\5\3\1\11\2\3\1\51\1\63"+
    "\1\51\1\55\1\46\1\0\1\26\1\37\1\24\1\13\1\22\1\23"+
    "\1\5\1\42\1\32\1\16\1\47\1\25\1\36\1\33\1\40\1\30"+
    "\1\3\1\31\1\27\1\34\1\44\1\43\1\45\1\35\1\41\1\3"+
    "\1\51\1\55\1\51\1\55\uff81\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    52,   104,   156,   208,   260,   312,   208,   364,   416, 
      468,   520,   572,   208,   624,   676,   728,   780,   832,   884, 
      936,   988,  1040,  1092,  1144,  1196,  1248,  1300,  1352,  1404, 
     1456,  1508,  1560,  1612,  1664,  1716,  1612,  1768,  1820,  1872, 
      208,  1924,  1976,  1924,  2028,   208,  2080,   208,  2132,  2184, 
     2236,  2288,   208,  2340,  2392,  2444,  2496,  2548,  2600,  2652, 
     2704,  2756,  2808,  2860,  2912,  2964,  3016,  3068,  3120,  3172, 
     3224,  3276,  3328,  3380,  3432,  3484,  3536,  3588,  3640,  3692, 
     3744,  3796,  3848,  3900,  3952,  4004,   312,   312,   312,  4056, 
     4108,  4160,  4212,  4264,  4316,  4368,  4420,  4472,  4524,  4576, 
     4628,  4680,  4732,  4784,  4836,  4888,  4940,  4992,   208,   208, 
      208,  5044,  5096,  5148,  5200,  5252,  5304,  5356,  5408,  5460, 
      312,  5148,  5512,  5564,  5616,  5668,  5720,  5772,  5824,  5876, 
     5928,  5980,  6032,  6084,  6136,  6188,  6240,  6292,  6344,  6396, 
     6448,  6500,  6552,  6604,  6656,  6708,  6760,  6812,  6864,  6916, 
     6968,  7020,  7072,  7124,  7176,  7228,  7280,  7332,  7384,  7436, 
     7488,  7540,  7592,  7644,  7696,  7748,  7800,  7852,  7904,  7956, 
     8008,  8060,   312,  8112,  8164,  8216,  8268,  8320,  8372,  8424, 
     8476,  8528,  8580,  8632,  8684,  8736,  8788,  8840,  4628,  8892, 
     8944,   312,  8996,  9048,   208,   208,  9100,  9152,  9204,  9256, 
     9308,  9360,  9412,  9464,  9516,  9568,  9620,  9672,  9724,  9776, 
     3692,  9828,  9880,  9932,  9984,   208, 10036, 10088, 10140, 10192, 
    10244, 10296, 10348, 10400, 10452, 10504, 10556, 10608, 10660, 10712, 
    10764, 10816, 10868, 10920, 10972, 11024, 11076, 11128, 11180, 11232, 
    11284, 11336, 11388, 11440
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\5\1\6\1\5\1\7\1\10\1\11\1\12\1\13"+
    "\3\7\1\14\2\13\1\7\1\15\1\7\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\7\1\36"+
    "\1\37\1\7\1\40\2\7\1\41\1\10\1\42\1\43"+
    "\1\44\1\16\1\45\1\46\1\47\1\50\1\51\1\5"+
    "\1\52\1\53\1\54\60\52\1\5\63\55\1\5\1\56"+
    "\1\57\1\60\61\56\66\0\1\5\64\0\3\7\2\0"+
    "\4\7\2\0\1\7\1\0\1\7\1\0\27\7\6\0"+
    "\1\7\7\0\3\7\2\0\4\7\2\0\1\7\1\0"+
    "\1\7\1\0\1\61\2\7\1\62\23\7\6\0\1\7"+
    "\12\0\1\63\1\64\1\65\1\66\2\0\1\67\1\70"+
    "\1\65\1\71\1\72\1\0\1\72\2\0\1\65\7\0"+
    "\1\66\34\0\2\13\1\65\3\0\2\13\1\65\1\71"+
    "\1\72\1\0\1\72\2\0\1\65\41\0\3\7\2\0"+
    "\4\7\2\0\1\7\1\0\1\7\1\0\1\73\7\7"+
    "\1\74\16\7\6\0\1\7\12\0\2\71\4\0\2\71"+
    "\51\0\3\7\2\0\4\7\2\0\1\7\1\0\1\7"+
    "\1\0\3\7\1\75\7\7\1\76\5\7\1\77\5\7"+
    "\6\0\1\7\7\0\3\7\2\0\4\7\2\0\1\7"+
    "\1\0\1\7\1\0\3\7\1\100\3\7\1\101\1\102"+
    "\5\7\1\103\10\7\6\0\1\7\7\0\3\7\2\0"+
    "\4\7\2\0\1\7\1\0\1\7\1\0\3\7\1\104"+
    "\1\105\7\7\1\106\1\7\1\107\1\7\1\110\6\7"+
    "\6\0\1\7\7\0\3\7\2\0\4\7\2\0\1\7"+
    "\1\0\1\7\1\0\1\111\3\7\1\112\11\7\1\113"+
    "\10\7\6\0\1\7\7\0\3\7\2\0\4\7\2\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\114\2\7\1\115"+
    "\1\116\2\7\1\117\3\7\1\120\11\7\6\0\1\7"+
    "\7\0\3\7\2\0\4\7\2\0\1\7\1\0\1\7"+
    "\1\0\1\61\11\7\1\110\14\7\6\0\1\7\7\0"+
    "\3\7\2\0\4\7\2\0\1\7\1\0\1\7\1\0"+
    "\4\7\1\121\2\7\1\122\6\7\1\123\10\7\6\0"+
    "\1\7\7\0\3\7\2\0\4\7\2\0\1\7\1\0"+
    "\1\7\1\0\1\124\3\7\1\125\11\7\1\126\10\7"+
    "\6\0\1\7\1\47\1\50\5\0\3\7\2\0\3\7"+
    "\1\127\2\0\1\7\1\0\1\7\1\0\1\7\1\130"+
    "\3\7\1\131\3\7\1\132\2\7\1\133\12\7\6\0"+
    "\1\7\7\0\3\7\2\0\4\7\2\0\1\7\1\0"+
    "\1\7\1\0\16\7\1\134\10\7\6\0\1\7\7\0"+
    "\3\7\2\0\4\7\2\0\1\7\1\0\1\7\1\0"+
    "\7\7\1\135\7\7\1\136\2\7\1\137\4\7\6\0"+
    "\1\7\7\0\3\7\2\0\4\7\2\0\1\7\1\0"+
    "\1\7\1\0\7\7\1\140\17\7\6\0\1\7\7\0"+
    "\3\7\2\0\4\7\2\0\1\7\1\0\1\7\1\0"+
    "\4\7\1\141\3\7\1\111\16\7\6\0\1\7\7\0"+
    "\3\7\2\0\4\7\2\0\1\7\1\0\1\7\1\0"+
    "\7\7\1\142\17\7\6\0\1\7\7\0\3\7\2\0"+
    "\4\7\2\0\1\7\1\0\1\7\1\0\2\7\1\143"+
    "\3\7\1\144\1\145\17\7\6\0\1\7\7\0\3\7"+
    "\2\0\4\7\2\0\1\7\1\0\1\7\1\0\1\146"+
    "\3\7\1\147\22\7\6\0\1\7\7\0\3\7\2\0"+
    "\4\7\2\0\1\7\1\0\1\7\1\0\4\7\1\150"+
    "\22\7\6\0\1\7\7\0\3\7\2\0\4\7\2\0"+
    "\1\7\1\0\1\7\1\0\20\7\1\151\6\7\6\0"+
    "\1\7\7\0\3\7\2\0\4\7\2\0\1\7\1\0"+
    "\1\7\1\0\16\7\1\152\10\7\6\0\1\7\56\0"+
    "\1\16\63\0\2\16\62\0\3\16\12\0\3\7\2\0"+
    "\4\7\2\0\1\7\1\0\1\7\1\0\27\7\6\0"+
    "\1\7\1\47\1\50\62\0\1\153\64\0\1\154\62\0"+
    "\1\155\1\156\4\0\1\157\55\0\1\155\1\156\62\0"+
    "\1\160\1\161\4\0\1\60\64\0\3\7\2\0\4\7"+
    "\2\0\1\7\1\0\1\7\1\0\12\7\1\162\14\7"+
    "\6\0\1\7\7\0\3\7\2\0\4\7\2\0\1\7"+
    "\1\0\1\7\1\0\16\7\1\163\10\7\6\0\1\7"+
    "\12\0\1\63\1\64\1\65\3\0\1\67\1\70\1\65"+
    "\1\71\1\72\1\0\1\72\2\0\1\65\44\0\2\64"+
    "\4\0\2\64\1\65\1\71\1\72\1\0\1\72\47\0"+
    "\1\164\1\165\2\0\4\165\2\0\1\165\1\0\3\165"+
    "\1\0\1\165\10\0\1\165\32\0\1\166\1\64\1\65"+
    "\3\0\2\166\1\65\1\71\1\72\1\0\1\72\2\0"+
    "\1\65\44\0\1\67\1\64\1\65\3\0\2\67\1\65"+
    "\1\71\1\72\1\0\1\72\2\0\1\65\44\0\2\71"+
    "\4\0\2\71\1\65\1\0\1\72\1\0\1\72\47\0"+
    "\2\167\4\0\2\167\3\0\1\170\45\0\3\7\2\0"+
    "\4\7\2\0\1\7\1\0\1\7\1\0\1\7\1\171"+
    "\1\7\1\172\23\7\6\0\1\7\7\0\3\7\2\0"+
    "\4\7\2\0\1\7\1\0\1\7\1\0\7\7\1\127"+
    "\11\7\1\173\5\7\6\0\1\7\7\0\3\7\2\0"+
    "\4\7\2\0\1\7\1\0\1\7\1\0\5\7\1\174"+
    "\2\7\1\175\16\7\6\0\1\7\7\0\3\7\2\0"+
    "\4\7\2\0\1\7\1\0\1\7\1\0\1\176\1\7"+
    "\1\177\24\7\6\0\1\7\7\0\3\7\2\0\4\7"+
    "\2\0\1\7\1\0\1\7\1\0\4\7\1\200\22\7"+
    "\6\0\1\7\7\0\3\7\2\0\4\7\2\0\1\7"+
    "\1\0\1\7\1\0\16\7\1\201\10\7\6\0\1\7"+
    "\7\0\3\7\2\0\4\7\2\0\1\7\1\0\1\7"+
    "\1\0\16\7\1\202\10\7\6\0\1\7\7\0\3\7"+
    "\2\0\4\7\2\0\1\7\1\0\1\7\1\0\3\7"+
    "\1\203\5\7\1\204\15\7\6\0\1\7\7\0\3\7"+
    "\2\0\4\7\2\0\1\7\1\0\1\7\1\0\7\7"+
    "\1\130\17\7\6\0\1\7\7\0\3\7\2\0\4\7"+
    "\2\0\1\7\1\0\1\7\1\0\4\7\1\205\22\7"+
    "\6\0\1\7\7\0\3\7\2\0\4\7\2\0\1\7"+
    "\1\0\1\7\1\0\3\7\1\206\23\7\6\0\1\7"+
    "\7\0\3\7\2\0\4\7\2\0\1\7\1\0\1\7"+
    "\1\0\6\7\1\127\20\7\6\0\1\7\7\0\3\7"+
    "\2\0\4\7\2\0\1\7\1\0\1\7\1\0\1\207"+
    "\10\7\1\210\2\7\1\211\12\7\6\0\1\7\7\0"+
    "\3\7\2\0\4\7\2\0\1\7\1\0\1\7\1\0"+
    "\7\7\1\127\17\7\6\0\1\7\7\0\3\7\2\0"+
    "\4\7\2\0\1\7\1\0\1\7\1\0\11\7\1\127"+
    "\15\7\6\0\1\7\7\0\3\7\2\0\4\7\2\0"+
    "\1\7\1\0\1\7\1\0\14\7\1\212\12\7\6\0"+
    "\1\7\7\0\3\7\2\0\4\7\2\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\213\6\7\1\214\15\7\6\0"+
    "\1\7\7\0\3\7\2\0\4\7\2\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\215\24\7\6\0\1\7\7\0"+
    "\3\7\2\0\4\7\2\0\1\7\1\0\1\7\1\0"+
    "\5\7\1\216\21\7\6\0\1\7\7\0\3\7\2\0"+
    "\4\7\2\0\1\7\1\0\1\7\1\0\6\7\1\217"+
    "\20\7\6\0\1\7\7\0\3\7\2\0\3\7\1\131"+
    "\2\0\1\7\1\0\1\7\1\0\27\7\6\0\1\7"+
    "\7\0\3\7\2\0\4\7\2\0\1\7\1\0\1\7"+
    "\1\0\5\7\1\127\21\7\6\0\1\7\7\0\3\7"+
    "\2\0\4\7\2\0\1\7\1\0\1\7\1\0\5\7"+
    "\1\220\21\7\6\0\1\7\7\0\3\7\2\0\4\7"+
    "\2\0\1\7\1\0\1\7\1\0\10\7\1\221\16\7"+
    "\6\0\1\7\7\0\3\7\2\0\4\7\2\0\1\7"+
    "\1\0\1\7\1\0\23\7\1\127\3\7\6\0\1\7"+
    "\7\0\3\7\2\0\3\7\1\222\2\0\1\7\1\0"+
    "\1\7\1\0\3\7\1\223\2\7\1\110\3\7\1\224"+
    "\14\7\6\0\1\7\7\0\3\7\2\0\4\7\2\0"+
    "\1\7\1\0\1\7\1\0\10\7\1\225\1\226\11\7"+
    "\1\227\3\7\6\0\1\7\7\0\3\7\2\0\4\7"+
    "\2\0\1\7\1\0\1\7\1\0\22\7\1\230\4\7"+
    "\6\0\1\7\7\0\3\7\2\0\4\7\2\0\1\7"+
    "\1\0\1\7\1\0\6\7\1\231\3\7\1\127\14\7"+
    "\6\0\1\7\7\0\3\7\2\0\4\7\2\0\1\7"+
    "\1\0\1\7\1\0\6\7\1\232\20\7\6\0\1\7"+
    "\7\0\3\7\2\0\4\7\2\0\1\7\1\0\1\7"+
    "\1\0\12\7\1\131\14\7\6\0\1\7\7\0\3\7"+
    "\2\0\4\7\2\0\1\7\1\0\1\7\1\0\17\7"+
    "\1\130\7\7\6\0\1\7\7\0\3\7\2\0\4\7"+
    "\2\0\1\7\1\0\1\7\1\0\6\7\1\233\20\7"+
    "\6\0\1\7\7\0\3\7\2\0\4\7\2\0\1\7"+
    "\1\0\1\7\1\0\6\7\1\234\20\7\6\0\1\7"+
    "\7\0\3\7\2\0\4\7\2\0\1\7\1\0\1\7"+
    "\1\0\4\7\1\235\22\7\6\0\1\7\7\0\3\7"+
    "\2\0\4\7\2\0\1\7\1\0\1\7\1\0\6\7"+
    "\1\127\4\7\1\127\13\7\6\0\1\7\7\0\3\7"+
    "\2\0\4\7\2\0\1\7\1\0\1\7\1\0\1\236"+
    "\26\7\6\0\1\7\7\0\3\7\2\0\4\7\2\0"+
    "\1\7\1\0\1\7\1\0\12\7\1\127\14\7\6\0"+
    "\1\7\7\0\3\7\2\0\4\7\2\0\1\7\1\0"+
    "\1\7\1\0\1\111\26\7\6\0\1\7\7\0\3\7"+
    "\2\0\3\7\1\127\2\0\1\7\1\0\1\7\1\0"+
    "\27\7\6\0\1\7\7\0\3\7\2\0\4\7\2\0"+
    "\1\7\1\0\1\7\1\0\13\7\1\127\13\7\6\0"+
    "\1\7\7\0\3\7\2\0\4\7\2\0\1\7\1\0"+
    "\1\7\1\0\5\7\1\237\21\7\6\0\1\7\7\0"+
    "\3\7\2\0\4\7\2\0\1\7\1\0\1\7\1\0"+
    "\7\7\1\120\17\7\6\0\1\7\7\0\3\7\2\0"+
    "\4\7\2\0\1\7\1\0\1\7\1\0\10\7\1\240"+
    "\16\7\6\0\1\7\7\0\3\7\2\0\4\7\2\0"+
    "\1\7\1\0\1\7\1\0\11\7\1\241\15\7\6\0"+
    "\1\7\64\0\1\242\64\0\1\243\62\0\1\244\64\0"+
    "\1\245\5\0\3\7\2\0\4\7\2\0\1\7\1\0"+
    "\1\7\1\0\4\7\1\246\22\7\6\0\1\7\7\0"+
    "\3\7\2\0\4\7\2\0\1\7\1\0\1\7\1\0"+
    "\15\7\1\247\11\7\6\0\1\7\12\0\1\164\1\165"+
    "\1\65\1\0\4\165\2\0\1\165\1\0\3\165\1\65"+
    "\1\165\10\0\1\165\32\0\2\250\1\65\1\0\4\250"+
    "\2\0\1\250\1\0\3\250\1\65\1\250\10\0\1\250"+
    "\32\0\1\251\1\64\1\65\3\0\2\251\1\65\1\71"+
    "\1\72\1\0\1\72\2\0\1\65\44\0\2\167\4\0"+
    "\2\167\1\65\53\0\2\167\4\0\2\167\51\0\3\7"+
    "\2\0\4\7\2\0\1\7\1\0\1\7\1\0\14\7"+
    "\1\252\12\7\6\0\1\7\7\0\3\7\2\0\4\7"+
    "\2\0\1\7\1\0\1\7\1\0\1\130\26\7\6\0"+
    "\1\7\7\0\3\7\2\0\4\7\2\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\130\25\7\6\0\1\7\7\0"+
    "\3\7\2\0\4\7\2\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\253\24\7\6\0\1\7\7\0\3\7\2\0"+
    "\4\7\2\0\1\7\1\0\1\7\1\0\1\254\26\7"+
    "\6\0\1\7\7\0\3\7\2\0\4\7\2\0\1\7"+
    "\1\0\1\7\1\0\3\7\1\127\23\7\6\0\1\7"+
    "\7\0\3\7\2\0\4\7\2\0\1\7\1\0\1\7"+
    "\1\0\4\7\1\143\22\7\6\0\1\7\7\0\3\7"+
    "\2\0\4\7\2\0\1\7\1\0\1\7\1\0\14\7"+
    "\1\255\12\7\6\0\1\7\7\0\3\7\2\0\4\7"+
    "\2\0\1\7\1\0\1\7\1\0\12\7\1\256\14\7"+
    "\6\0\1\7\7\0\3\7\2\0\4\7\2\0\1\7"+
    "\1\0\1\7\1\0\4\7\1\257\22\7\6\0\1\7"+
    "\7\0\3\7\2\0\4\7\2\0\1\7\1\0\1\7"+
    "\1\0\5\7\1\260\21\7\6\0\1\7\7\0\3\7"+
    "\2\0\4\7\2\0\1\7\1\0\1\7\1\0\3\7"+
    "\1\261\23\7\6\0\1\7\7\0\3\7\2\0\4\7"+
    "\2\0\1\7\1\0\1\7\1\0\7\7\1\262\17\7"+
    "\6\0\1\7\7\0\3\7\2\0\4\7\2\0\1\7"+
    "\1\0\1\7\1\0\12\7\1\263\14\7\6\0\1\7"+
    "\7\0\3\7\2\0\4\7\2\0\1\7\1\0\1\7"+
    "\1\0\6\7\1\264\20\7\6\0\1\7\7\0\3\7"+
    "\2\0\4\7\2\0\1\7\1\0\1\7\1\0\15\7"+
    "\1\265\11\7\6\0\1\7\7\0\3\7\2\0\4\7"+
    "\2\0\1\7\1\0\1\7\1\0\4\7\1\266\22\7"+
    "\6\0\1\7\7\0\2\7\1\127\2\0\4\7\2\0"+
    "\1\7\1\0\1\7\1\0\27\7\6\0\1\7\7\0"+
    "\3\7\2\0\4\7\2\0\1\7\1\0\1\7\1\0"+
    "\1\205\26\7\6\0\1\7\7\0\3\7\2\0\4\7"+
    "\2\0\1\7\1\0\1\7\1\0\1\267\26\7\6\0"+
    "\1\7\7\0\3\7\2\0\4\7\2\0\1\7\1\0"+
    "\1\7\1\0\3\7\1\270\23\7\6\0\1\7\7\0"+
    "\3\7\2\0\4\7\2\0\1\7\1\0\1\7\1\0"+
    "\5\7\1\130\21\7\6\0\1\7\7\0\3\7\2\0"+
    "\4\7\2\0\1\7\1\0\1\7\1\0\11\7\1\271"+
    "\15\7\6\0\1\7\7\0\3\7\2\0\4\7\2\0"+
    "\1\7\1\0\1\7\1\0\22\7\1\262\4\7\6\0"+
    "\1\7\7\0\3\7\2\0\4\7\2\0\1\7\1\0"+
    "\1\7\1\0\16\7\1\272\10\7\6\0\1\7\7\0"+
    "\3\7\2\0\4\7\2\0\1\7\1\0\1\7\1\0"+
    "\22\7\1\273\4\7\6\0\1\7\7\0\3\7\2\0"+
    "\4\7\2\0\1\7\1\0\1\7\1\0\5\7\1\174"+
    "\21\7\6\0\1\7\7\0\2\7\1\233\2\0\4\7"+
    "\2\0\1\7\1\0\1\7\1\0\27\7\6\0\1\7"+
    "\7\0\3\7\2\0\4\7\2\0\1\7\1\0\1\7"+
    "\1\0\24\7\1\274\2\7\6\0\1\7\7\0\3\7"+
    "\2\0\4\7\2\0\1\7\1\0\1\7\1\0\11\7"+
    "\1\275\15\7\6\0\1\7\7\0\3\7\2\0\4\7"+
    "\2\0\1\7\1\0\1\7\1\0\22\7\1\143\4\7"+
    "\6\0\1\7\7\0\3\7\2\0\4\7\2\0\1\7"+
    "\1\0\1\7\1\0\16\7\1\276\10\7\6\0\1\7"+
    "\7\0\3\7\2\0\4\7\2\0\1\7\1\0\1\7"+
    "\1\0\1\127\26\7\6\0\1\7\7\0\3\7\2\0"+
    "\4\7\2\0\1\7\1\0\1\7\1\0\3\7\1\233"+
    "\23\7\6\0\1\7\7\0\3\7\2\0\4\7\2\0"+
    "\1\7\1\0\1\7\1\0\11\7\1\226\15\7\6\0"+
    "\1\7\7\0\3\7\2\0\4\7\2\0\1\7\1\0"+
    "\1\7\1\0\4\7\1\277\22\7\6\0\1\7\7\0"+
    "\3\7\2\0\4\7\2\0\1\7\1\0\1\7\1\0"+
    "\4\7\1\246\13\7\1\127\6\7\6\0\1\7\7\0"+
    "\3\7\2\0\4\7\2\0\1\7\1\0\1\7\1\0"+
    "\3\7\1\174\23\7\6\0\1\7\7\0\3\7\2\0"+
    "\4\7\2\0\1\7\1\0\1\7\1\0\1\300\26\7"+
    "\6\0\1\7\64\0\1\301\64\0\1\302\62\0\1\303"+
    "\64\0\1\304\5\0\3\7\2\0\4\7\2\0\1\7"+
    "\1\0\1\7\1\0\12\7\1\305\14\7\6\0\1\7"+
    "\7\0\3\7\2\0\4\7\2\0\1\7\1\0\1\7"+
    "\1\0\4\7\1\306\22\7\6\0\1\7\12\0\2\307"+
    "\1\65\1\0\4\307\2\0\1\307\1\0\3\307\1\65"+
    "\1\307\10\0\1\307\32\0\1\310\1\64\1\65\3\0"+
    "\2\310\1\65\1\71\1\72\1\0\1\72\2\0\1\65"+
    "\41\0\3\7\2\0\4\7\2\0\1\7\1\0\1\7"+
    "\1\0\16\7\1\275\10\7\6\0\1\7\7\0\3\7"+
    "\2\0\4\7\2\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\264\25\7\6\0\1\7\7\0\3\7\2\0\4\7"+
    "\2\0\1\7\1\0\1\7\1\0\6\7\1\311\20\7"+
    "\6\0\1\7\7\0\3\7\2\0\4\7\2\0\1\7"+
    "\1\0\1\7\1\0\1\110\26\7\6\0\1\7\7\0"+
    "\3\7\2\0\4\7\2\0\1\7\1\0\1\7\1\0"+
    "\3\7\1\312\23\7\6\0\1\7\7\0\3\7\2\0"+
    "\4\7\2\0\1\7\1\0\1\7\1\0\5\7\1\171"+
    "\21\7\6\0\1\7\7\0\3\7\2\0\4\7\2\0"+
    "\1\7\1\0\1\7\1\0\4\7\1\313\22\7\6\0"+
    "\1\7\7\0\3\7\2\0\4\7\2\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\233\24\7\6\0\1\7\7\0"+
    "\3\7\2\0\4\7\2\0\1\7\1\0\1\7\1\0"+
    "\10\7\1\314\16\7\6\0\1\7\7\0\3\7\2\0"+
    "\4\7\2\0\1\7\1\0\1\7\1\0\10\7\1\234"+
    "\16\7\6\0\1\7\7\0\3\7\2\0\3\7\1\315"+
    "\2\0\1\7\1\0\1\7\1\0\27\7\6\0\1\7"+
    "\7\0\3\7\2\0\4\7\2\0\1\7\1\0\1\7"+
    "\1\0\3\7\1\120\23\7\6\0\1\7\7\0\3\7"+
    "\2\0\4\7\2\0\1\7\1\0\1\7\1\0\7\7"+
    "\1\271\17\7\6\0\1\7\7\0\3\7\2\0\4\7"+
    "\2\0\1\7\1\0\1\7\1\0\17\7\1\127\7\7"+
    "\6\0\1\7\7\0\3\7\2\0\4\7\2\0\1\7"+
    "\1\0\1\7\1\0\12\7\1\171\14\7\6\0\1\7"+
    "\7\0\3\7\2\0\4\7\2\0\1\7\1\0\1\7"+
    "\1\0\4\7\1\275\22\7\6\0\1\7\7\0\3\7"+
    "\2\0\4\7\2\0\1\7\1\0\1\7\1\0\7\7"+
    "\1\316\17\7\6\0\1\7\7\0\3\7\2\0\4\7"+
    "\2\0\1\7\1\0\1\7\1\0\10\7\1\317\16\7"+
    "\6\0\1\7\7\0\3\7\2\0\4\7\2\0\1\7"+
    "\1\0\1\7\1\0\7\7\1\320\17\7\6\0\1\7"+
    "\7\0\3\7\2\0\4\7\2\0\1\7\1\0\1\7"+
    "\1\0\25\7\1\130\1\7\6\0\1\7\64\0\1\321"+
    "\64\0\1\322\5\0\3\7\2\0\4\7\2\0\1\7"+
    "\1\0\1\7\1\0\12\7\1\110\14\7\6\0\1\7"+
    "\7\0\3\7\2\0\4\7\2\0\1\7\1\0\1\7"+
    "\1\0\3\7\1\323\23\7\6\0\1\7\12\0\2\324"+
    "\1\65\1\0\4\324\2\0\1\324\1\0\3\324\1\65"+
    "\1\324\10\0\1\324\32\0\1\325\1\64\1\65\3\0"+
    "\2\325\1\65\1\71\1\72\1\0\1\72\2\0\1\65"+
    "\41\0\3\7\2\0\4\7\2\0\1\7\1\0\1\7"+
    "\1\0\12\7\1\130\14\7\6\0\1\7\7\0\3\7"+
    "\2\0\4\7\2\0\1\7\1\0\1\7\1\0\3\7"+
    "\1\135\23\7\6\0\1\7\7\0\3\7\2\0\4\7"+
    "\2\0\1\7\1\0\1\7\1\0\15\7\1\234\11\7"+
    "\6\0\1\7\7\0\3\7\2\0\4\7\2\0\1\7"+
    "\1\0\1\7\1\0\11\7\1\326\15\7\6\0\1\7"+
    "\7\0\3\7\2\0\4\7\2\0\1\7\1\0\1\7"+
    "\1\0\4\7\1\171\22\7\6\0\1\7\7\0\3\7"+
    "\2\0\4\7\2\0\1\7\1\0\1\7\1\0\11\7"+
    "\1\130\15\7\6\0\1\7\7\0\3\7\2\0\4\7"+
    "\2\0\1\7\1\0\1\7\1\0\11\7\1\327\15\7"+
    "\6\0\1\7\7\0\3\7\2\0\4\7\2\0\1\7"+
    "\1\0\1\7\1\0\12\7\1\255\14\7\6\0\1\7"+
    "\64\0\1\330\64\0\1\330\10\0\2\331\1\65\1\0"+
    "\4\331\2\0\1\331\1\0\3\331\1\65\1\331\10\0"+
    "\1\331\32\0\1\332\1\64\1\65\3\0\2\332\1\65"+
    "\1\71\1\72\1\0\1\72\2\0\1\65\41\0\3\7"+
    "\2\0\4\7\2\0\1\7\1\0\1\7\1\0\22\7"+
    "\1\174\4\7\6\0\1\7\7\0\3\7\2\0\4\7"+
    "\2\0\1\7\1\0\1\7\1\0\6\7\1\231\20\7"+
    "\6\0\1\7\12\0\2\333\1\65\1\0\4\333\2\0"+
    "\1\333\1\0\3\333\1\65\1\333\10\0\1\333\32\0"+
    "\1\334\1\64\1\65\3\0\2\334\1\65\1\71\1\72"+
    "\1\0\1\72\2\0\1\65\44\0\2\335\1\65\1\0"+
    "\4\335\2\0\1\335\1\0\3\335\1\65\1\335\10\0"+
    "\1\335\32\0\1\336\1\64\1\65\3\0\2\336\1\65"+
    "\1\71\1\72\1\0\1\72\2\0\1\65\44\0\2\337"+
    "\1\65\1\0\4\337\2\0\1\337\1\0\3\337\1\65"+
    "\1\337\10\0\1\337\32\0\1\340\1\64\1\65\3\0"+
    "\2\340\1\65\1\71\1\72\1\0\1\72\2\0\1\65"+
    "\44\0\2\341\1\65\1\0\4\341\2\0\1\341\1\0"+
    "\3\341\1\65\1\341\10\0\1\341\32\0\1\342\1\64"+
    "\1\65\3\0\2\342\1\65\1\71\1\72\1\0\1\72"+
    "\2\0\1\65\44\0\2\343\1\65\1\0\4\343\2\0"+
    "\1\343\1\0\3\343\1\65\1\343\10\0\1\343\32\0"+
    "\1\344\1\64\1\65\3\0\2\344\1\65\1\71\1\72"+
    "\1\0\1\72\2\0\1\65\44\0\2\345\1\65\1\0"+
    "\4\345\2\0\1\345\1\0\3\345\1\65\1\345\10\0"+
    "\1\345\32\0\1\346\1\64\1\65\3\0\2\346\1\65"+
    "\1\71\1\72\1\0\1\72\2\0\1\65\44\0\2\347"+
    "\1\65\1\0\4\347\2\0\1\347\1\0\3\347\1\65"+
    "\1\347\10\0\1\347\32\0\1\350\1\64\1\65\3\0"+
    "\2\350\1\65\1\71\1\72\1\0\1\72\2\0\1\65"+
    "\44\0\2\351\1\65\1\0\4\351\2\0\1\351\1\0"+
    "\3\351\1\65\1\351\10\0\1\351\32\0\1\352\1\64"+
    "\1\65\3\0\2\352\1\65\1\71\1\72\1\0\1\72"+
    "\2\0\1\65\44\0\2\353\1\65\1\0\4\353\2\0"+
    "\1\353\1\0\3\353\1\65\1\353\10\0\1\353\32\0"+
    "\1\354\1\64\1\65\3\0\2\354\1\65\1\71\1\72"+
    "\1\0\1\72\2\0\1\65\44\0\2\355\1\65\1\0"+
    "\4\355\2\0\1\355\1\0\3\355\1\65\1\355\10\0"+
    "\1\355\32\0\1\356\1\64\1\65\3\0\2\356\1\65"+
    "\1\71\1\72\1\0\1\72\2\0\1\65\44\0\2\357"+
    "\1\65\1\0\4\357\2\0\1\357\1\0\3\357\1\65"+
    "\1\357\10\0\1\357\32\0\1\360\1\64\1\65\3\0"+
    "\2\360\1\65\1\71\1\72\1\0\1\72\2\0\1\65"+
    "\46\0\1\65\14\0\1\65\44\0\1\361\1\64\1\65"+
    "\3\0\2\361\1\65\1\71\1\72\1\0\1\72\2\0"+
    "\1\65\44\0\1\362\1\64\1\65\3\0\2\362\1\65"+
    "\1\71\1\72\1\0\1\72\2\0\1\65\44\0\1\363"+
    "\1\64\1\65\3\0\2\363\1\65\1\71\1\72\1\0"+
    "\1\72\2\0\1\65\44\0\1\364\1\64\1\65\3\0"+
    "\2\364\1\65\1\71\1\72\1\0\1\72\2\0\1\65"+
    "\44\0\2\64\1\65\3\0\2\64\1\65\1\71\1\72"+
    "\1\0\1\72\2\0\1\65\36\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  9,  1,  1,  9,  1,  1,  1,  1,  1,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  9,  1,  9, 
     1,  1,  1,  1,  9,  0,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  0, 
     0,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  0,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  0,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1, 
     1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
  private String quote;

  public void scan() throws IOException
  {
     while ( !yy_atEOF )	
     {
       yylex();
     }
  }

  private int applyStyle(int type) 
  {
     return applyStyle(type, yychar, yylength());
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PythonFlexScanner(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PythonFlexScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[11492];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (yy_currentPos < yy_endRead) return yy_buffer[yy_currentPos++];

    /* if the eof is reached, we don't need to work hard */ 
    if (yy_atEOF) return YYEOF;

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if ( numRead == -1 ) return YYEOF;

    yy_endRead+= numRead;

    return yy_buffer[yy_currentPos++];
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;


    while (true) {

      yychar+= yylength();

      yy_action = -1;

      yy_currentPos = yy_startRead = yy_markedPos;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          yy_input = yy_advance();

          if ( yy_input == YYEOF ) break yy_forAction;

          int yy_next = yytrans[ yy_rowMap[yy_state] + yycmap[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = YY_ATTRIBUTE[yy_state];
          if ( (yy_attributes & 1) > 0 ) {
            yy_action = yy_state; 
            yy_markedPos = yy_currentPos; 
            if ( (yy_attributes & 8) > 0 ) break yy_forAction;
          }

        }
      }


      switch (yy_action) {

        case 5: 
          {  return applyStyle(SyntaxStyle.DEFAULT); }
        case 245: break;
        case 195: 
          { 
                                    if (quote.equals("\"\"\"")
                                        || (quote.length()==4
                                            && quote.substring(1).equals("\"\"\"")))
                                    {
                                       yybegin(YYINITIAL);
                                       return applyStyle(SyntaxStyle.LITERAL3,
                                                         spanStart,
                                                         yylength()+yychar-spanStart);
                                    }

                                  }
        case 246: break;
        case 194: 
          { 
                                    if (quote.equals("'''")
                                        || (quote.length()==4
                                            && quote.substring(1).equals("'''")))
                                    {
                                       yybegin(YYINITIAL);
                                       return applyStyle(SyntaxStyle.LITERAL3,
                                                         spanStart,
                                                         yylength()+yychar-spanStart);
                                    }

                                  }
        case 247: break;
        case 191: 
          {  return applyStyle(SyntaxStyle.LITERAL4);  }
        case 248: break;
        case 172: 
          {  return applyStyle(SyntaxStyle.INCLUDE);   }
        case 249: break;
        case 161: 
        case 162: 
          {  
                                    yybegin(MULTI_LINE_STRING_STATE); 
                                    spanStart=yychar; 
                                    quote=yytext();
                                    return applyStyle(SyntaxStyle.LITERAL1);	
                                  }
        case 250: break;
        case 40: 
          {  
                                   yybegin(COMMENT_STATE);
                                   spanStart=yychar;
                                   return applyStyle(SyntaxStyle.COMMENT1); 
                                  }
        case 251: break;
        case 38: 
        case 39: 
          {  
                                    yybegin(STRING_STATE); 
                                    spanStart=yychar; 
                                    quote=yytext();
                                    return applyStyle(SyntaxStyle.LITERAL1);
                                  }
        case 252: break;
        case 13: 
        case 33: 
        case 34: 
        case 35: 
        case 88: 
        case 89: 
        case 100: 
          {  return applyStyle(SyntaxStyle.OPERATOR);  }
        case 253: break;
        case 9: 
        case 10: 
        case 50: 
        case 51: 
        case 52: 
        case 54: 
        case 55: 
        case 56: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 167: 
        case 168: 
        case 198: 
        case 199: 
        case 211: 
        case 212: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 225: 
        case 227: 
        case 229: 
        case 231: 
        case 233: 
        case 235: 
        case 237: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
          {  return applyStyle(SyntaxStyle.LITERAL2);  }
        case 254: break;
        case 7: 
        case 12: 
          {  return applyStyle(SyntaxStyle.SEPARATOR1);  }
        case 255: break;
        case 6: 
        case 8: 
        case 11: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 37: 
        case 48: 
        case 49: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 113: 
        case 114: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 165: 
        case 166: 
        case 169: 
        case 171: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 196: 
        case 197: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 213: 
        case 214: 
          {  return applyStyle(SyntaxStyle.IDENTIFIER1);  }
        case 256: break;
        case 4: 
        case 36: 
        case 41: 
        case 44: 
          {  return applyStyle(SyntaxStyle.DEFAULT);  }
        case 257: break;
        case 42: 
        case 43: 
        case 110: 
          {  
                                   yybegin(YYINITIAL); 
                                   return applyStyle(SyntaxStyle.ERROR, 
                                                     spanStart, 
                                                     yylength()+yychar-spanStart); 
                                  }
        case 258: break;
        case 45: 
          {  applyStyle(SyntaxStyle.COMMENT1);  }
        case 259: break;
        case 46: 
        case 47: 
          {  
	                            yybegin(YYINITIAL);
                                    return applyStyle(SyntaxStyle.COMMENT1,
                                                      spanStart,
                                                      yylength()+yychar-spanStart);
                                  }
        case 260: break;
        case 86: 
          {  return applyStyle(SyntaxStyle.KEYWORD2);  }
        case 261: break;
        case 87: 
          {  return applyStyle(SyntaxStyle.KEYWORD3);  }
        case 262: break;
        case 106: 
        case 107: 
        case 215: 
          {  return applyStyle(SyntaxStyle.LITERAL1);  }
        case 263: break;
        case 108: 
          {  
                                  
                                    if (quote.equals("'") 
                                       || (quote.length()==2 
                                            && quote.substring(1).equals("'")))
                                   {
                                     yybegin(YYINITIAL); 
                                     return applyStyle(SyntaxStyle.LITERAL1, 
                                                       spanStart, 
                                                       yylength()+yychar-spanStart); 
                                   }
                                  }
        case 264: break;
        case 109: 
          {  
				   if (quote.equals("\"") 
                                       || (quote.length()==2 
                                            && quote.substring(1).equals("\"")))
                                   {
                                     yybegin(YYINITIAL); 
                                     return applyStyle(SyntaxStyle.LITERAL1, 
                                                       spanStart, 
                                                       yylength()+yychar-spanStart); 
                                   }
                                  }
        case 265: break;
        case 120: 
        case 121: 
        case 170: 
        case 210: 
          {  return applyStyle(SyntaxStyle.KEYWORD1);  }
        case 266: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
              {  return -1; }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
