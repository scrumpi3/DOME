// DHelpUtils.java
package mit.cadlab.dome3.help;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URL;
import javax.help.DefaultHelpBroker;
import javax.help.HelpBroker;
import javax.help.HelpSet;
import javax.help.JHelp;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 * This class contains convenience functions for using the
 * JavaHelp API.
 */
public class DHelpUtils
{

	/**
	 * true means that errors are displayed in dialogs
	 * false means that errors are printed to System.err
	 */
	public static boolean showGuiError = true;

	/**
	 * Modifies JavaHelp to open external URLs in user's native web browser.
	 * Sets the HelpContentViewerUI to DContentViewerUI.
	 * This function should be called before JavaHelp is used.
	 */
	public static void setDContentViewerUI()
	{
		UIManager.put("HelpContentViewerUI", "mit.cadlab.dome3.swing.plaf.DContentViewerUI");
		//UIManager.put("RootPaneUI","mit.cadlab.dome3.swing.plaf.DRootPaneUI");
	}

	/**
	 * @param helpSetName name of HelpSet (with or without .hs)
	 * @return the HelpBroker for the given name; null if errors.
	 */
	public static HelpBroker getHelpBroker(String helpSetName)
	{
		HelpSet hs = getHelpSet(helpSetName);
		if (hs == null) return null;
		return new DefaultHelpBroker(hs);
	}

	/**
	 * @param helpSetName name of HelpSet (with or without .hs)
	 * @return the HelpSet found for the given name; null if errors.
	 */
	public static HelpSet getHelpSet(String helpSetName)
	{
		URL helpURL = getHelpURL(helpSetName);
		if (helpURL == null) return null;
		try {
			return new HelpSet(null, helpURL);
		} catch (Exception ee) {
			handleError("Problem creating HelpSet for " + helpSetName);
			return null;
		}
	}

	/**
	 * @param helpSetName name of HelpSet (with or without .hs)
	 * @return the URL for the HelpSet; null if errors.
	 */
	public static URL getHelpURL(String helpSetName)
	{
		URL url = HelpSet.findHelpSet(DHelpUtils.class.getClassLoader(), helpSetName);
		if (url == null)
			handleError("Can not find HelpSet " + helpSetName);
		return url;
	}

	/**
	 * @param helpSetName name of HelpSet (with or without .hs)
	 * @return a HelpFrame containing the HelpSet; null if errors.
	 */
	public static HelpFrame getHelpFrame(String helpSetName)
	{
		HelpSet hs = getHelpSet(helpSetName);
		if (hs == null) return null;
		return new HelpFrame(hs);
	}

	/**
	 * This function handles errors generated by other functions
	 * in this class.
	 * May be overridden by subclasses.
	 */
	protected static void handleError(String msg)
	{
		if (showGuiError)
			JOptionPane.showMessageDialog(null, msg, "Help Error", JOptionPane.ERROR_MESSAGE);
		else
			System.err.println("Help Error: " + msg);
	}

	/**
	 * A HelpFrame displays the HelpSet specified
	 * and gives access to the JHelp component.
	 */
	public static class HelpFrame extends JFrame
	{
		protected JHelp jHelp;

		public HelpFrame(HelpSet helpSet)
		{
			if (helpSet == null)
				throw new NullPointerException("DomeHelp.HelpFrame - null HelpSet");
			jHelp = new JHelp(helpSet);
			String hsTitle = helpSet.getTitle();
			if (hsTitle == null) hsTitle = "";
			setTitle(hsTitle);
			setForeground(Color.black);
			setBackground(Color.lightGray);
			getContentPane().add(jHelp);
		}

		public JHelp getJHelp()
		{
			return jHelp;
		}
	}

	/**
	 * An ActionListener that displays the given view in the help viewer.
	 */
	public static class DisplayView implements ActionListener
	{
		protected HelpBroker hb;
		protected String view;

		public DisplayView(HelpBroker hb, String view)
		{
			if (hb == null) {
				throw new NullPointerException("DisplayViewOnButton - null HelpBroker");
			}
			this.hb = hb;
			if (view == null) {
				throw new NullPointerException("DisplayViewOnButton - null view");
			}
			this.view = view;
		}

		public void actionPerformed(ActionEvent event)
		{
			hb.setCurrentView(view);
			if (!hb.isDisplayed()) {
				hb.initPresentation();
				hb.setDisplayed(true);
			}
		}

	}

}
